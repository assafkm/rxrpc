import java.util.concurrent.Callable

apply from: "$scriptsDir/java.gradle"
apply from: "$scriptsDir/nodejs.gradle"

def nodeProjectDir = project.file("$project.projectDir/frontend")
node {
    it.nodeProjectDir = nodeProjectDir
}

compileJava.options.compilerArgs = [
        "-Arxrpc.ts.typemaps=$projectDir/src/main/typemap/types.properties",
        '-Arxrpc.ts.ngmodule',
        '-Arxrpc.ts.ngmodule.name=BackendApiModule'
]

task syncBackendApi(type: Sync) {
    dependsOn(compileJava)
    from fileTree(dir: "$project.buildDir/generated/source/apt/main/typescript", include: '*.ts')
    into file("$nodeProjectDir/src/backend-api")
}

task yarnCleanCache(type: YarnTask) {
    args = ['cache', 'clean']
}

clean.dependsOn(yarnCleanCache)

yarn.dependsOn project(':rxrpc-js').tasks.yarnPack

yarnBuild {
    it.dependsOn(yarn, syncBackendApi)
    it.inputs.file file("$nodeProjectDir/angular.json")
    it.inputs.files fileTree("$nodeProjectDir/src")
    it.outputs.files fileTree("$buildDir/resources/main/web")
}

dependencies {
    annotationProcessor project(':rxrpc-apt-typescript')
    annotationProcessor project(':rxrpc-apt-java')
    implementation project(':rxrpc-core')
    implementation project(':rxrpc-jetty-websocket')

    implementation libs.rxJava
    implementation libs.jacksonCore
    implementation libs.jacksonDataBind
    implementation libs.jacksonAnnotations
    implementation libs.slimGenericUtils

    implementation libs.jettyServer, libs.jettyServlet

    testImplementation libs.commonsIo, libs.junit, libs.mockito
    compileOnly libs.autoValueAnnotations
    annotationProcessor libs.autoValue
}
